/**
 * Logger
 */
export declare class Logger {
    private readonly signale;
    private readonly replacer;
    private static isRequiredEndGroup;
    /**
     * @param {function|undefined} replacer replacer
     * @param {object|undefined} signaleSettings signale settings
     */
    constructor(replacer?: (string: any) => string, signaleSettings?: object);
    private output;
    info: (message: string, ...args: any[]) => void;
    displayCommand: (message: string, ...args: any[]) => void;
    displayStdout: (message: string) => void;
    displayStderr: (message: string) => void;
    startProcess: (message: string, ...args: any[]) => void;
    endProcess: () => void;
    static resetForTesting: () => void;
}
declare type LoggerFunction = (...message: any[]) => void;
declare type DefaultLogger = 'await' | 'complete' | 'debug' | 'error' | 'fatal' | 'fav' | 'info' | 'log' | 'note' | 'pause' | 'pending' | 'star' | 'start' | 'success' | 'wait' | 'warn' | 'watch';
export interface Logger extends Record<DefaultLogger, LoggerFunction> {
}
export {};
