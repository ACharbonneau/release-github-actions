"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
exports.getContext = (override) => Object.assign({
    payload: {
        action: '',
    },
    eventName: '',
    sha: '',
    ref: '',
    workflow: '',
    action: '',
    actor: '',
    issue: {
        owner: '',
        repo: '',
        number: 1,
    },
    repo: {
        owner: '',
        repo: '',
    },
}, override);
exports.encodeContent = (content) => Buffer.from(content).toString('base64');
exports.getConfigFixture = (rootDir, fileName = 'config.yml') => ({
    type: 'file',
    encoding: 'base64',
    size: 5362,
    name: fileName,
    path: `.github/${fileName}`,
    content: exports.encodeContent(fs_1.default.readFileSync(path_1.default.resolve(rootDir, fileName)).toString()),
    sha: '3d21ec53a331a6f037a91c368710b99387d012c1',
    url: 'https://api.github.com/repos/Codertocat/Hello-World/contents/.github/release-drafter.yml',
    'git_url': 'https://api.github.com/repos/Codertocat/Hello-World/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1',
    'html_url': 'https://github.com/Codertocat/Hello-World/blob/master/.github/release-drafter.yml',
    'download_url': 'https://raw.githubusercontent.com/Codertocat/Hello-World/master/.github/release-drafter.yml',
    _links: {
        git: 'https://api.github.com/repos/Codertocat/Hello-World/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1',
        self: 'https://api.github.com/repos/Codertocat/Hello-World/contents/.github/release-drafter.yml',
        html: 'https://github.com/Codertocat/Hello-World/blob/master/.github/release-drafter.yml',
    },
});
exports.getApiFixture = (rootDir, name) => JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(rootDir, `${name}.json`)).toString());
exports.disableNetConnect = (nock) => {
    beforeEach(() => {
        nock.disableNetConnect();
    });
    afterEach(() => {
        nock.cleanAll();
        nock.enableNetConnect();
    });
};
exports.testEnv = () => {
    const OLD_ENV = process.env;
    beforeEach(() => {
        jest.resetModules();
        process.env = Object.assign({}, OLD_ENV);
        delete process.env.NODE_ENV;
    });
    afterEach(() => {
        process.env = OLD_ENV;
    });
};
//# sourceMappingURL=utils.js.map